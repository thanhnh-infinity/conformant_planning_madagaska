(define (domain raos_keys)
 (:types light key)
 (:constants  k0 k1 k2 k3 k4 - key)
 (:predicates
  (crouching)
  (not_crouching)
  (not_wearing_sunglasses)
  (wearing_sunglasses)
  (key_at ?k - key ?l - light)
  (have_key ?k)
  (neq ?l1 ?l2 - light)
  (at ?l - light)
  (opens ?k - key ?l - light)
  (open ?l - light)
 )
 (:action exchange_sunglasses
  :precondition (and)
  :effect (and (when (wearing_sunglasses)
                     (and (not (wearing_sunglasses))
			  (not_wearing_sunglasses)))
	       (when (not_wearing_sunglasses)
                     (and (wearing_sunglasses)
			  (not (not_wearing_sunglasses))))
 ))
 (:action stand_up
  :effect (and (not_crouching) (not (crouching))))
 (:action crouch
  :effect (and (crouching) (not (not_crouching))))
 (:action search_under_light
  :parameters (?l - light)
  :precondition (and (at ?l) (wearing_sunglasses) (crouching))
  :effect (and
		(when (and (open ?l) (key_at k1 ?l)) (have_key k1))
		(when (and (open ?l) (key_at k2 ?l)) (have_key k2))
		(when (and (open ?l) (key_at k3 ?l)) (have_key k3))
		(when (and (open ?l) (key_at k4 ?l)) (have_key k4))
          )
 )
 (:action goto_light
  :parameters (?l1 ?l2 - light)
  :precondition (and (neq ?l1 ?l2)
                     (at ?l1)
                     (not_wearing_sunglasses)
                     (not_crouching))
  :effect (and (at ?l2) (not (at ?l1)))
 )
 (:action open_gate
  :parameters (?l - light ?k - key)
  :precondition (and 
                  (at ?l)                
                  (not_wearing_sunglasses)
                  (not_crouching)
                )
  :effect (and (when (and (have_key ?k) (opens ?k ?l)) (open ?l))))
)
